{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOoTXHOVEIA67mmEMsg+gnk",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/saivardhan4f0/AI/blob/main/gradient%20descent\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UAkSpj0epRk",
        "outputId": "5dae81bd-0009-404b-bd7a-07c89df07625"
      },
      "source": [
        "\n",
        "#gradient descent optimal solution for 3x^2+5e^(-y)+10\n",
        "import math\n",
        "x_0=2\n",
        "y_0=3\n",
        "eta=0.1\n",
        "eps=0\n",
        "del_x=1\n",
        "del_y=1\n",
        "max_iters=2\n",
        "iters=0\n",
        "actuals=0\n",
        "e=3\n",
        "x=0\n",
        "y=0\n",
        "def deriv(x,y):\n",
        "    x_deriv=6*(x)\n",
        "    y_deriv=5*pow(e,-y)\n",
        "    return x_deriv,y_deriv\n",
        "def actual(x_0,y_0):\n",
        "    x= 3*(x_0)*(x_0)+5*pow(e,-y_0)+10\n",
        "    return x\n",
        "while max(abs(del_x),abs(del_y))>eps and iters<max_iters:\n",
        "  prev_x=x_0\n",
        "  prev_y=y_0\n",
        "  del_x,del_y=deriv(prev_x,prev_y)\n",
        "  del_x=-eta*del_x\n",
        "  del_y=-eta*del_y\n",
        "  x_0=x_0+del_x\n",
        "  y_0=y_0+del_y\n",
        "  iters=iters+1\n",
        "  print (\"iteration\",iters,\"\\nX value is\", x_0,\"\\nY value is \",y_0)\n",
        "print (\"The local minimum occurs at x= \",x_0,y_0)\n",
        "actuals=x_0\n",
        "true=y_0\n",
        "x=actual(actuals,true)\n",
        "print (\"the optimal solution\",x)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "iteration 1 \n",
            "X value is 0.7999999999999998 \n",
            "Y value is  2.9814814814814814\n",
            "iteration 2 \n",
            "X value is 0.3199999999999999 \n",
            "Y value is  2.9625823511947784\n",
            "The local minimum occurs at x=  0.3199999999999999 2.9625823511947784\n",
            "the optimal solution 10.500156314627237\n"
          ]
        }
      ]
    }
  ]
}